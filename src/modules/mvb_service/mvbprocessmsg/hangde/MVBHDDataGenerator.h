#pragma once    
#include "../MVBDataGenerator.h"
#include <iostream>
// #include <string>
#include <mutex>
#include <vector>


/***************************************************************************
 * @file    MVBHDDataGenerator.h
 * @brief  杭德项目协议组装类
 *          
 *
 *
 * @note    
 ***************************************************************************/

const static uint8_t auchCRCLo[]=
{
0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
0x40
};
/* Table of CRC values for high–order byte */
const static uint8_t auchCRCHi[]=
{
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
0x40
};


class MVBHDDataGenerator final:public MVBDataGenerator
{
private:
    /* data */
public:
    MVBHDDataGenerator(/* args */);
   virtual ~ MVBHDDataGenerator();

    //设置报警信息
    void setTempAlarm(int iAlarmLevel) override; 			//  设置温度警告
    void setCatOffALarm(int iAlarmLevel) override;			//  设置拉出值警告
    void setCatHeiAlarm(int iAlarmLevel) override;			//  设置导高警告
    void setArcAlarm(int iAlarmLevel) override;				//  设置燃弧警告
    void setStrAlarm(int iAlarmLevel) override {};				//  设置结构类型警告  
    void setAccAlarm(int iAlarmLevel) override {};				//  设置加速度警告
    void setYangJiaoAlarm(int iAlarmLevel) override {};		//  设置羊角警告
    void setTanHuaBanAlarm(int iAlarmLevel) override {};		//  设置碳滑板警告
    void setGongTouAlarm(int iAlarmLevel) override {};			//  设置弓头警告
    void setContactForcAlarm(int iAlarmLevel) override {};		//  设置接触力警告
    void setRetRailHspaceAlarm(int iAlarmLevel) override {};	//  设置回流轨水平间距警告
    void setRetRailVspaceAlarm(int iAlarmLevel) override {};	//  设置回流轨垂直高度警告
    void setRetRailHardPotAlarm(int iAlarmLevel) override {};	//  设置回流轨硬点警告
    void setDiversionWireAlarm(int iAlarmLevel) override {};	//  设置导流线警告

    //设置模块状态
    void setPMSCameraFault(bool value) override {};       //录像模块
    void setPMSGeoAbrModFault(bool value) override;    //几何模块
    void setPMSArcModFault(bool value) override;       //燃弧模块
    void setPMSTmpModFault(bool value) override;       //红外温度模块
    void setPMSIPanModStatus(bool value) override {};     //受电弓结构识别模块
    void setPMSComModFault(bool value) override {};       //补偿模块
    void setPMSCommuModFault(bool value) override {};     //Tcms服务模块
    void setPMSHardPotModFault(bool value) override {};   //加速度模块
    void setPMSPressureModFault(bool value) override {};  //压力检测模块
    // void setPMSGeoAbrModFault(bool value) override;    //磨耗检测模块
    void setPMSXunjianModFault(bool value) override {};   //接触网巡检拍照模块
    void setRetRailGeoModFault(bool value) override {};   //回流轨几何参数检测模块
    void setRetRailCameraFault(bool value) override {};   //回流轨与回流器视频监控模块
    void setRetRailHardPotModFault(bool value) override {}; //回流轨硬点模块
    void setNvrDskFault(bool value) override {};               //NVR硬盘故障
    void setPMSChecking(bool value) override {};              //正在自检
    void setPMSCheckComplete(bool value) override {};         //自检完成
    void setPMSCheckRes(bool value) override {};            //自测成功
    std::string getPmsData() override;					 //获取pms心跳包数据
    void setPMSAlive(uint16_t alive) override;			 //设置pms心跳次数
    void initCommonInfo() override;						 //初始化公共信息
    void setSleepCmd(bool value) override;				 //设置是否休眠标志
	void initConfigInfo(const std::string& configpath) override;


private:
	/**********************
    * @brief 设置指定字节指定位的值
    * @param offset			指定字节 
	* @param beginbit			起始位
	* @param endbit			结束位 
	* @param modbit			需要修改的位 
	* @param value			值 
    * @return 
    ************************ */
    void setBitSetValue(int offset,int beginbit,int endbit,int modbit,bool value);
	/**********************
    * @brief 设置多字节的值
    * @param len			占用字节数据
	* @param value			值
    * @return 
    ************************ */
    template <typename T>
    void setValue(int offset,int len, T value,bool isBigEndian);

	void setPMSComID(int comid) ;				 //设置comid

    void initsystemtime();

	uint16_t Modbus_CRC16(uint8_t *Buff_addr,uint16_t len)
{
	uint8_t uchCRCHi = 0xFF ; /* 初始化高字节*/
	uint8_t uchCRCLo = 0xFF ; /* 初始化低字节*/
	uint8_t i, uIndex ; /*CRC 表索引*/
	for(i=0;i<len;i++)
	{
	uIndex = uchCRCLo^Buff_addr[i];
	uchCRCLo= uchCRCHi^auchCRCHi[uIndex];
	uchCRCHi= auchCRCLo[uIndex];
	}
	return ((uchCRCHi<<8)|uchCRCLo);
}

private:
    std::vector<uint8_t> m_data;
    std::mutex m_dataMtx;
    bool m_isBigEndian = false;
    int m_comid = 0;
    int m_unitnum = 0;          //单元号
    int m_carnum = 0;           //车厢号
    uint16_t m_pmsVersion = 0;  //软件版本信息
};
